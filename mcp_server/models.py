# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T01:42:33+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class BigQueryAction(BaseModel):
    sqlScript: Optional[str] = Field(
        None,
        description='Output only. The generated BigQuery SQL script that will be executed.',
    )


class CancelWorkflowInvocationRequest(BaseModel):
    pass


class CodeCompilationConfig(BaseModel):
    assertionSchema: Optional[str] = Field(
        None,
        description='Optional. The default schema (BigQuery dataset ID) for assertions.',
    )
    databaseSuffix: Optional[str] = Field(
        None,
        description='Optional. The suffix that should be appended to all database (Google Cloud project ID) names.',
    )
    defaultDatabase: Optional[str] = Field(
        None, description='Optional. The default database (Google Cloud project ID).'
    )
    defaultLocation: Optional[str] = Field(
        None,
        description='Optional. The default BigQuery location to use. Defaults to "US". See the BigQuery docs for a full list of locations: https://cloud.google.com/bigquery/docs/locations.',
    )
    defaultSchema: Optional[str] = Field(
        None, description='Optional. The default schema (BigQuery dataset ID).'
    )
    schemaSuffix: Optional[str] = Field(
        None,
        description='Optional. The suffix that should be appended to all schema (BigQuery dataset ID) names.',
    )
    tablePrefix: Optional[str] = Field(
        None,
        description='Optional. The prefix that should be prepended to all table names.',
    )
    vars: Optional[Dict[str, str]] = Field(
        None,
        description='Optional. User-defined variables that are made available to project code during compilation.',
    )


class ColumnDescriptor(BaseModel):
    bigqueryPolicyTags: Optional[List[str]] = Field(
        None,
        description='A list of BigQuery policy tags that will be applied to the column.',
    )
    description: Optional[str] = Field(
        None, description='A textual description of the column.'
    )
    path: Optional[List[str]] = Field(
        None,
        description='The identifier for the column. Each entry in `path` represents one level of nesting.',
    )


class CommitAuthor(BaseModel):
    emailAddress: Optional[str] = Field(
        None, description="Required. The commit author's email address."
    )
    name: Optional[str] = Field(None, description="Required. The commit author's name.")


class CommitWorkspaceChangesRequest(BaseModel):
    author: Optional[CommitAuthor] = Field(
        None, description="Required. The commit's author."
    )
    commitMessage: Optional[str] = Field(
        None, description="Optional. The commit's message."
    )
    paths: Optional[List[str]] = Field(
        None,
        description='Optional. Full file paths to commit including filename, rooted at workspace root. If left empty, all files will be committed.',
    )


class DirectoryEntry(BaseModel):
    directory: Optional[str] = Field(
        None, description='A child directory in the directory.'
    )
    file: Optional[str] = Field(None, description='A file in the directory.')


class Empty(BaseModel):
    pass


class Expr(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.',
    )
    expression: Optional[str] = Field(
        None,
        description='Textual representation of an expression in Common Expression Language syntax.',
    )
    location: Optional[str] = Field(
        None,
        description='Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.',
    )
    title: Optional[str] = Field(
        None,
        description='Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.',
    )


class FetchFileDiffResponse(BaseModel):
    formattedDiff: Optional[str] = Field(
        None, description='The raw formatted Git diff for the file.'
    )


class FetchGitAheadBehindResponse(BaseModel):
    commitsAhead: Optional[int] = Field(
        None,
        description='The number of commits in the remote branch that are not in the workspace.',
    )
    commitsBehind: Optional[int] = Field(
        None,
        description='The number of commits in the workspace that are not in the remote branch.',
    )


class FetchRemoteBranchesResponse(BaseModel):
    branches: Optional[List[str]] = Field(
        None, description="The remote repository's branch names."
    )


class TokenStatus(Enum):
    TOKEN_STATUS_UNSPECIFIED = 'TOKEN_STATUS_UNSPECIFIED'
    NOT_FOUND = 'NOT_FOUND'
    INVALID = 'INVALID'
    VALID = 'VALID'


class GitRemoteSettings(BaseModel):
    authenticationTokenSecretVersion: Optional[str] = Field(
        None,
        description='Required. The name of the Secret Manager secret version to use as an authentication token for Git operations. Must be in the format `projects/*/secrets/*/versions/*`.',
    )
    defaultBranch: Optional[str] = Field(
        None, description="Required. The Git remote's default branch name."
    )
    tokenStatus: Optional[TokenStatus] = Field(
        None, description='Output only. Indicates the status of the Git access token.'
    )
    url: Optional[str] = Field(None, description="Required. The Git remote's URL.")


class IncrementalTableConfig(BaseModel):
    incrementalPostOperations: Optional[List[str]] = Field(
        None,
        description='SQL statements to be executed after inserting new rows into the relation.',
    )
    incrementalPreOperations: Optional[List[str]] = Field(
        None,
        description='SQL statements to be executed before inserting new rows into the relation.',
    )
    incrementalSelectQuery: Optional[str] = Field(
        None,
        description='The SELECT query which returns rows which should be inserted into the relation if it already exists and is not being refreshed.',
    )
    refreshDisabled: Optional[bool] = Field(
        None, description='Whether this table should be protected from being refreshed.'
    )
    uniqueKeyParts: Optional[List[str]] = Field(
        None,
        description='A set of columns or SQL expressions used to define row uniqueness. If any duplicates are discovered (as defined by `unique_key_parts`), only the newly selected rows (as defined by `incremental_select_query`) will be included in the relation.',
    )
    updatePartitionFilter: Optional[str] = Field(
        None,
        description='A SQL expression conditional used to limit the set of existing rows considered for a merge operation (see `unique_key_parts` for more information).',
    )


class InstallNpmPackagesRequest(BaseModel):
    pass


class InstallNpmPackagesResponse(BaseModel):
    pass


class Interval(BaseModel):
    endTime: Optional[str] = Field(
        None,
        description='Optional. Exclusive end of the interval. If specified, a Timestamp matching this interval will have to be before the end.',
    )
    startTime: Optional[str] = Field(
        None,
        description='Optional. Inclusive start of the interval. If specified, a Timestamp matching this interval will have to be the same or after the start.',
    )


class Location(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='The friendly name for this location, typically a nearby city name. For example, "Tokyo".',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}',
    )
    locationId: Optional[str] = Field(
        None,
        description='The canonical id for this location. For example: `"us-east1"`.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata. For example the available capacity at the given location.',
    )
    name: Optional[str] = Field(
        None,
        description='Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`',
    )


class MakeDirectoryRequest(BaseModel):
    path: Optional[str] = Field(
        None,
        description="Required. The directory's full path including directory name, relative to the workspace root.",
    )


class MakeDirectoryResponse(BaseModel):
    pass


class MoveDirectoryRequest(BaseModel):
    newPath: Optional[str] = Field(
        None,
        description='Required. The new path for the directory including directory name, rooted at workspace root.',
    )
    path: Optional[str] = Field(
        None,
        description="Required. The directory's full path including directory name, relative to the workspace root.",
    )


class MoveDirectoryResponse(BaseModel):
    pass


class MoveFileRequest(BaseModel):
    newPath: Optional[str] = Field(
        None,
        description="Required. The file's new path including filename, relative to the workspace root.",
    )
    path: Optional[str] = Field(
        None,
        description="Required. The file's full path including filename, relative to the workspace root.",
    )


class MoveFileResponse(BaseModel):
    pass


class OperationMetadata(BaseModel):
    apiVersion: Optional[str] = Field(
        None, description='Output only. API version used to start the operation.'
    )
    cancelRequested: Optional[bool] = Field(
        None,
        description='Output only. Identifies whether the user has requested cancellation of the operation. Operations that have been cancelled successfully have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    statusDetail: Optional[str] = Field(
        None, description='Output only. Human-readable status of the operation, if any.'
    )
    target: Optional[str] = Field(
        None,
        description='Output only. Server-defined resource path for the target of the operation.',
    )
    verb: Optional[str] = Field(
        None, description='Output only. Name of the verb executed by the operation.'
    )


class PullGitCommitsRequest(BaseModel):
    author: Optional[CommitAuthor] = Field(
        None,
        description='Required. The author of any merge commit which may be created as a result of merging fetched Git commits into this workspace.',
    )
    remoteBranch: Optional[str] = Field(
        None,
        description="Optional. The name of the branch in the Git remote from which to pull commits. If left unset, the repository's default branch name will be used.",
    )


class PushGitCommitsRequest(BaseModel):
    remoteBranch: Optional[str] = Field(
        None,
        description="Optional. The name of the branch in the Git remote to which commits should be pushed. If left unset, the repository's default branch name will be used.",
    )


class QueryDirectoryContentsResponse(BaseModel):
    directoryEntries: Optional[List[DirectoryEntry]] = Field(
        None, description='List of entries in the directory.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )


class ReadFileResponse(BaseModel):
    fileContents: Optional[str] = Field(None, description="The file's contents.")


class RelationType(Enum):
    RELATION_TYPE_UNSPECIFIED = 'RELATION_TYPE_UNSPECIFIED'
    TABLE = 'TABLE'
    VIEW = 'VIEW'
    INCREMENTAL_TABLE = 'INCREMENTAL_TABLE'
    MATERIALIZED_VIEW = 'MATERIALIZED_VIEW'


class RelationDescriptor(BaseModel):
    bigqueryLabels: Optional[Dict[str, str]] = Field(
        None,
        description='A set of BigQuery labels that should be applied to the relation.',
    )
    columns: Optional[List[ColumnDescriptor]] = Field(
        None, description='A list of descriptions of columns within the relation.'
    )
    description: Optional[str] = Field(
        None, description='A text description of the relation.'
    )


class RemoveDirectoryRequest(BaseModel):
    path: Optional[str] = Field(
        None,
        description="Required. The directory's full path including directory name, relative to the workspace root.",
    )


class RemoveFileRequest(BaseModel):
    path: Optional[str] = Field(
        None,
        description="Required. The file's full path including filename, relative to the workspace root.",
    )


class ResetWorkspaceChangesRequest(BaseModel):
    clean: Optional[bool] = Field(
        None, description='Optional. If set to true, untracked files will be deleted.'
    )
    paths: Optional[List[str]] = Field(
        None,
        description='Optional. Full file paths to reset back to their committed state including filename, rooted at workspace root. If left empty, all files will be reset.',
    )


class Status(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class Target(BaseModel):
    database: Optional[str] = Field(
        None, description="The action's database (Google Cloud project ID) ."
    )
    name: Optional[str] = Field(
        None, description="The action's name, within `database` and `schema`."
    )
    schema_: Optional[str] = Field(
        None,
        alias='schema',
        description="The action's schema (BigQuery dataset ID), within `database`.",
    )


class TestIamPermissionsRequest(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).',
    )


class TestIamPermissionsResponse(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='A subset of `TestPermissionsRequest.permissions` that the caller is allowed.',
    )


class State(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    ADDED = 'ADDED'
    DELETED = 'DELETED'
    MODIFIED = 'MODIFIED'
    HAS_CONFLICTS = 'HAS_CONFLICTS'


class UncommittedFileChange(BaseModel):
    path: Optional[str] = Field(
        None,
        description="The file's full path including filename, relative to the workspace root.",
    )
    state: Optional[State] = Field(
        None, description='Indicates the status of the file.'
    )


class State1(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    RUNNING = 'RUNNING'
    SUCCEEDED = 'SUCCEEDED'
    CANCELLED = 'CANCELLED'
    FAILED = 'FAILED'
    CANCELING = 'CANCELING'


class State2(Enum):
    PENDING = 'PENDING'
    RUNNING = 'RUNNING'
    SKIPPED = 'SKIPPED'
    DISABLED = 'DISABLED'
    SUCCEEDED = 'SUCCEEDED'
    CANCELLED = 'CANCELLED'
    FAILED = 'FAILED'


class WorkflowInvocationAction(BaseModel):
    bigqueryAction: Optional[BigQueryAction] = Field(
        None, description="Output only. The workflow action's bigquery action details."
    )
    canonicalTarget: Optional[Target] = Field(
        None,
        description="Output only. The action's identifier if the project had been compiled without any overrides configured. Unique within the compilation result.",
    )
    failureReason: Optional[str] = Field(
        None,
        description="Output only. If and only if action's state is FAILED a failure reason is set.",
    )
    invocationTiming: Optional[Interval] = Field(
        None,
        description="Output only. This action's timing details. `start_time` will be set if the action is in [RUNNING, SUCCEEDED, CANCELLED, FAILED] state. `end_time` will be set if the action is in [SUCCEEDED, CANCELLED, FAILED] state.",
    )
    state: Optional[State2] = Field(
        None, description="Output only. This action's current state."
    )
    target: Optional[Target] = Field(
        None,
        description="Output only. This action's identifier. Unique within the workflow invocation.",
    )


class Workspace(BaseModel):
    name: Optional[str] = Field(None, description="Output only. The workspace's name.")


class WorkspaceCompilationOverrides(BaseModel):
    defaultDatabase: Optional[str] = Field(
        None, description='Optional. The default database (Google Cloud project ID).'
    )
    schemaSuffix: Optional[str] = Field(
        None,
        description='Optional. The suffix that should be appended to all schema (BigQuery dataset ID) names.',
    )
    tablePrefix: Optional[str] = Field(
        None,
        description='Optional. The prefix that should be prepended to all table names.',
    )


class WriteFileRequest(BaseModel):
    contents: Optional[str] = Field(None, description="Required. The file's contents.")
    path: Optional[str] = Field(None, description='Required. The file.')


class WriteFileResponse(BaseModel):
    pass


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class Assertion(BaseModel):
    dependencyTargets: Optional[List[Target]] = Field(
        None, description='A list of actions that this action depends on.'
    )
    disabled: Optional[bool] = Field(
        None, description='Whether this action is disabled (i.e. should not be run).'
    )
    parentAction: Optional[Target] = Field(
        None,
        description='The parent action of this assertion. Only set if this assertion was automatically generated.',
    )
    relationDescriptor: Optional[RelationDescriptor] = Field(
        None,
        description="Descriptor for the assertion's automatically-generated view and its columns.",
    )
    selectQuery: Optional[str] = Field(
        None,
        description='The SELECT query which must return zero rows in order for this assertion to succeed.',
    )
    tags: Optional[List[str]] = Field(
        None, description='Arbitrary, user-defined tags on this action.'
    )


class Binding(BaseModel):
    condition: Optional[Expr] = Field(
        None,
        description='The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )
    members: Optional[List[str]] = Field(
        None,
        description='Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.',
    )
    role: Optional[str] = Field(
        None,
        description='Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.',
    )


class CompilationError(BaseModel):
    actionTarget: Optional[Target] = Field(
        None,
        description='Output only. The identifier of the action where this error occurred, if available.',
    )
    message: Optional[str] = Field(
        None, description="Output only. The error's top level message."
    )
    path: Optional[str] = Field(
        None,
        description='Output only. The path of the file where this error occurred, if available, relative to the project root.',
    )
    stack: Optional[str] = Field(
        None, description="Output only. The error's full stack trace."
    )


class CompilationResult(BaseModel):
    codeCompilationConfig: Optional[CodeCompilationConfig] = Field(
        None,
        description='Immutable. If set, fields of `code_compilation_config` override the default compilation settings that are specified in dataform.json.',
    )
    compilationErrors: Optional[List[CompilationError]] = Field(
        None, description='Output only. Errors encountered during project compilation.'
    )
    dataformCoreVersion: Optional[str] = Field(
        None,
        description='Output only. The version of `@dataform/core` that was used for compilation.',
    )
    gitCommitish: Optional[str] = Field(
        None,
        description='Immutable. Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: `12ade345` - a tag: `tag1` - a branch name: `branch1`',
    )
    name: Optional[str] = Field(
        None, description="Output only. The compilation result's name."
    )
    releaseConfig: Optional[str] = Field(
        None,
        description="Immutable. The name of the release config to compile. The release config's 'current_compilation_result' field will be updated to this compilation result. Must be in the format `projects/*/locations/*/repositories/*/releaseConfigs/*`.",
    )
    resolvedGitCommitSha: Optional[str] = Field(
        None,
        description='Output only. The fully resolved Git commit SHA of the code that was compiled. Not set for compilation results whose source is a workspace.',
    )
    workspace: Optional[str] = Field(
        None,
        description='Immutable. The name of the workspace to compile. Must be in the format `projects/*/locations/*/repositories/*/workspaces/*`.',
    )


class Declaration(BaseModel):
    relationDescriptor: Optional[RelationDescriptor] = Field(
        None,
        description="Descriptor for the relation and its columns. Used as documentation only, i.e. values here will result in no changes to the relation's metadata.",
    )


class FetchFileGitStatusesResponse(BaseModel):
    uncommittedFileChanges: Optional[List[UncommittedFileChange]] = Field(
        None,
        description='A list of all files which have uncommitted Git changes. There will only be a single entry for any given file.',
    )


class InvocationConfig(BaseModel):
    fullyRefreshIncrementalTablesEnabled: Optional[bool] = Field(
        None,
        description='Optional. When set to true, any incremental tables will be fully refreshed.',
    )
    includedTags: Optional[List[str]] = Field(
        None, description='Optional. The set of tags to include.'
    )
    includedTargets: Optional[List[Target]] = Field(
        None, description='Optional. The set of action identifiers to include.'
    )
    transitiveDependenciesIncluded: Optional[bool] = Field(
        None,
        description='Optional. When set to true, transitive dependencies of included actions will be executed.',
    )
    transitiveDependentsIncluded: Optional[bool] = Field(
        None,
        description='Optional. When set to true, transitive dependents of included actions will be executed.',
    )


class ListCompilationResultsResponse(BaseModel):
    compilationResults: Optional[List[CompilationResult]] = Field(
        None, description='List of compilation results.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Locations which could not be reached.'
    )


class ListLocationsResponse(BaseModel):
    locations: Optional[List[Location]] = Field(
        None,
        description='A list of locations that matches the specified filter in the request.',
    )
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )


class ListWorkspacesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Locations which could not be reached.'
    )
    workspaces: Optional[List[Workspace]] = Field(
        None, description='List of workspaces.'
    )


class Operations(BaseModel):
    dependencyTargets: Optional[List[Target]] = Field(
        None, description='A list of actions that this action depends on.'
    )
    disabled: Optional[bool] = Field(
        None, description='Whether this action is disabled (i.e. should not be run).'
    )
    hasOutput: Optional[bool] = Field(
        None, description='Whether these operations produce an output relation.'
    )
    queries: Optional[List[str]] = Field(
        None,
        description='A list of arbitrary SQL statements that will be executed without alteration.',
    )
    relationDescriptor: Optional[RelationDescriptor] = Field(
        None,
        description='Descriptor for any output relation and its columns. Only set if `has_output` is true.',
    )
    tags: Optional[List[str]] = Field(
        None, description='Arbitrary, user-defined tags on this action.'
    )


class Policy(BaseModel):
    bindings: Optional[List[Binding]] = Field(
        None,
        description='Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.',
    )
    etag: Optional[str] = Field(
        None,
        description='`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.',
    )
    version: Optional[int] = Field(
        None,
        description='Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )


class QueryWorkflowInvocationActionsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    workflowInvocationActions: Optional[List[WorkflowInvocationAction]] = Field(
        None, description='List of workflow invocation actions.'
    )


class Relation(BaseModel):
    additionalOptions: Optional[Dict[str, str]] = Field(
        None,
        description='Additional options that will be provided as key/value pairs into the options clause of a create table/view statement. See https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language for more information on which options are supported.',
    )
    clusterExpressions: Optional[List[str]] = Field(
        None,
        description='A list of columns or SQL expressions used to cluster the table.',
    )
    dependencyTargets: Optional[List[Target]] = Field(
        None, description='A list of actions that this action depends on.'
    )
    disabled: Optional[bool] = Field(
        None, description='Whether this action is disabled (i.e. should not be run).'
    )
    incrementalTableConfig: Optional[IncrementalTableConfig] = Field(
        None,
        description='Configures `INCREMENTAL_TABLE` settings for this relation. Only set if `relation_type` is `INCREMENTAL_TABLE`.',
    )
    partitionExpirationDays: Optional[int] = Field(
        None, description='Sets the partition expiration in days.'
    )
    partitionExpression: Optional[str] = Field(
        None, description='The SQL expression used to partition the relation.'
    )
    postOperations: Optional[List[str]] = Field(
        None, description='SQL statements to be executed after creating the relation.'
    )
    preOperations: Optional[List[str]] = Field(
        None, description='SQL statements to be executed before creating the relation.'
    )
    relationDescriptor: Optional[RelationDescriptor] = Field(
        None, description='Descriptor for the relation and its columns.'
    )
    relationType: Optional[RelationType] = Field(
        None, description='The type of this relation.'
    )
    requirePartitionFilter: Optional[bool] = Field(
        None,
        description='Specifies whether queries on this table must include a predicate filter that filters on the partitioning column.',
    )
    selectQuery: Optional[str] = Field(
        None,
        description='The SELECT query which returns rows which this relation should contain.',
    )
    tags: Optional[List[str]] = Field(
        None, description='Arbitrary, user-defined tags on this action.'
    )


class Repository(BaseModel):
    gitRemoteSettings: Optional[GitRemoteSettings] = Field(
        None,
        description='Optional. If set, configures this repository to be linked to a Git remote.',
    )
    name: Optional[str] = Field(None, description="Output only. The repository's name.")
    npmrcEnvironmentVariablesSecretVersion: Optional[str] = Field(
        None,
        description='Optional. The name of the Secret Manager secret version to be used to interpolate variables into the .npmrc file for package installation operations. Must be in the format `projects/*/secrets/*/versions/*`. The file itself must be in a JSON format.',
    )
    workspaceCompilationOverrides: Optional[WorkspaceCompilationOverrides] = Field(
        None,
        description='Optional. If set, fields of `workspace_compilation_overrides` override the default compilation settings that are specified in dataform.json when creating workspace-scoped compilation results. See documentation for `WorkspaceCompilationOverrides` for more information.',
    )


class ScheduledExecutionRecord(BaseModel):
    errorStatus: Optional[Status] = Field(
        None,
        description='The error status encountered upon this attempt to create the workflow invocation, if the attempt was unsuccessful.',
    )
    executionTime: Optional[str] = Field(
        None, description='The timestamp of this execution attempt.'
    )
    workflowInvocation: Optional[str] = Field(
        None,
        description='The name of the created workflow invocation, if one was successfully created. Must be in the format `projects/*/locations/*/repositories/*/workflowInvocations/*`.',
    )


class ScheduledReleaseRecord(BaseModel):
    compilationResult: Optional[str] = Field(
        None,
        description='The name of the created compilation result, if one was successfully created. Must be in the format `projects/*/locations/*/repositories/*/compilationResults/*`.',
    )
    errorStatus: Optional[Status] = Field(
        None,
        description='The error status encountered upon this attempt to create the compilation result, if the attempt was unsuccessful.',
    )
    releaseTime: Optional[str] = Field(
        None, description='The timestamp of this release attempt.'
    )


class SetIamPolicyRequest(BaseModel):
    policy: Optional[Policy] = Field(
        None,
        description='REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.',
    )


class WorkflowConfig(BaseModel):
    cronSchedule: Optional[str] = Field(
        None,
        description='Optional. Optional schedule (in cron format) for automatic execution of this workflow config.',
    )
    invocationConfig: Optional[InvocationConfig] = Field(
        None,
        description='Optional. If left unset, a default InvocationConfig will be used.',
    )
    name: Optional[str] = Field(
        None, description="Output only. The workflow config's name."
    )
    recentScheduledExecutionRecords: Optional[List[ScheduledExecutionRecord]] = Field(
        None,
        description='Output only. Records of the 10 most recent scheduled execution attempts, ordered in in descending order of `execution_time`. Updated whenever automatic creation of a workflow invocation is triggered by cron_schedule.',
    )
    releaseConfig: Optional[str] = Field(
        None,
        description='Required. The name of the release config whose release_compilation_result should be executed. Must be in the format `projects/*/locations/*/repositories/*/releaseConfigs/*`.',
    )
    timeZone: Optional[str] = Field(
        None,
        description='Optional. Specifies the time zone to be used when interpreting cron_schedule. Must be a time zone name from the time zone database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). If left unspecified, the default is UTC.',
    )


class WorkflowInvocation(BaseModel):
    compilationResult: Optional[str] = Field(
        None,
        description='Immutable. The name of the compilation result to compile. Must be in the format `projects/*/locations/*/repositories/*/compilationResults/*`.',
    )
    invocationConfig: Optional[InvocationConfig] = Field(
        None,
        description='Immutable. If left unset, a default InvocationConfig will be used.',
    )
    invocationTiming: Optional[Interval] = Field(
        None, description="Output only. This workflow invocation's timing details."
    )
    name: Optional[str] = Field(
        None, description="Output only. The workflow invocation's name."
    )
    state: Optional[State1] = Field(
        None, description="Output only. This workflow invocation's current state."
    )
    workflowConfig: Optional[str] = Field(
        None,
        description='Immutable. The name of the workflow config to invoke. Must be in the format `projects/*/locations/*/repositories/*/workflowConfigs/*`.',
    )


class CompilationResultAction(BaseModel):
    assertion: Optional[Assertion] = Field(
        None, description='The assertion executed by this action.'
    )
    canonicalTarget: Optional[Target] = Field(
        None,
        description="The action's identifier if the project had been compiled without any overrides configured. Unique within the compilation result.",
    )
    declaration: Optional[Declaration] = Field(
        None, description='The declaration declared by this action.'
    )
    filePath: Optional[str] = Field(
        None,
        description='The full path including filename in which this action is located, relative to the workspace root.',
    )
    operations: Optional[Operations] = Field(
        None, description='The database operations executed by this action.'
    )
    relation: Optional[Relation] = Field(
        None, description='The database relation created/updated by this action.'
    )
    target: Optional[Target] = Field(
        None,
        description="This action's identifier. Unique within the compilation result.",
    )


class ListRepositoriesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    repositories: Optional[List[Repository]] = Field(
        None, description='List of repositories.'
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Locations which could not be reached.'
    )


class ListWorkflowConfigsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Locations which could not be reached.'
    )
    workflowConfigs: Optional[List[WorkflowConfig]] = Field(
        None, description='List of workflow configs.'
    )


class ListWorkflowInvocationsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Locations which could not be reached.'
    )
    workflowInvocations: Optional[List[WorkflowInvocation]] = Field(
        None, description='List of workflow invocations.'
    )


class QueryCompilationResultActionsResponse(BaseModel):
    compilationResultActions: Optional[List[CompilationResultAction]] = Field(
        None, description='List of compilation result actions.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )


class ReleaseConfig(BaseModel):
    codeCompilationConfig: Optional[CodeCompilationConfig] = Field(
        None,
        description='Optional. If set, fields of `code_compilation_config` override the default compilation settings that are specified in dataform.json.',
    )
    cronSchedule: Optional[str] = Field(
        None,
        description='Optional. Optional schedule (in cron format) for automatic creation of compilation results.',
    )
    gitCommitish: Optional[str] = Field(
        None,
        description='Required. Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: `12ade345` - a tag: `tag1` - a branch name: `branch1`',
    )
    name: Optional[str] = Field(
        None, description="Output only. The release config's name."
    )
    recentScheduledReleaseRecords: Optional[List[ScheduledReleaseRecord]] = Field(
        None,
        description='Output only. Records of the 10 most recent scheduled release attempts, ordered in in descending order of `release_time`. Updated whenever automatic creation of a compilation result is triggered by cron_schedule.',
    )
    releaseCompilationResult: Optional[str] = Field(
        None,
        description='Optional. The name of the currently released compilation result for this release config. This value is updated when a compilation result is created from this release config, or when this resource is updated by API call (perhaps to roll back to an earlier release). The compilation result must have been created using this release config. Must be in the format `projects/*/locations/*/repositories/*/compilationResults/*`.',
    )
    timeZone: Optional[str] = Field(
        None,
        description='Optional. Specifies the time zone to be used when interpreting cron_schedule. Must be a time zone name from the time zone database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). If left unspecified, the default is UTC.',
    )


class ListReleaseConfigsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    releaseConfigs: Optional[List[ReleaseConfig]] = Field(
        None, description='List of release configs.'
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Locations which could not be reached.'
    )
